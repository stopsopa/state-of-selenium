/**
 * selenium.min.js generated by
 *      https://skalman.github.io/UglifyJS-online/
 */

// trigger manualy in browser (before lib is loaded or not)

// (function(w,n,d){w.selenium_d||(w.selenium_d={});w.selenium_d[n]={data:d};w.selenium&&w.selenium.trigger(n)}(window,
//     'test',
//     'existing data'
// ));

(function (root, factory) {

    let tmp;

    try {
        // Browser globals
        tmp = window.selenium = factory(window);
    }
    catch (e) {
    }

    if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = tmp || factory({});
    }

}(typeof self !== 'undefined' ? self : this, function (root) {

    var log = (function () {
        try {
            return console.log;
        }
        catch (e) {
            return function () {};
        }
    }());

    if (root.selenium) {

        try {
            log('selenium.js already defined');
        }
        catch (e) {}

        return root.selenium;
    }

    root.selenium_e || (root.selenium_e = {});

    root.selenium_d || (root.selenium_d = {});

    function trigger(name, type) {

        try {
            log(['selenium', type, ':', name].join(' '));
        }
        catch (e) {}

        if (root.selenium_d[name] && root.selenium_e[name]) {

            var tmp = [].concat(root.selenium_e[name]);

            var buff;

            while (buff = tmp.shift()) {
                try {
                    buff(root.selenium_d[name].data);
                }
                catch (e) {
                    tool.unsubscribe(name, buff);
                }
            }
        }
    }

    var tool = {
        dispatch: (name, data) => {

            root.selenium_d[name] = {data:data};

            trigger(name, 'dispatch');

            return this;
        },
        subscribe: (name, fn, multiple) => { // multiple => false by default

            root.selenium_e[name] || (root.selenium_e[name] = []);

            if (multiple) {

                root.selenium_e[name].push(fn);
            }
            else {

                var newfn = data => {

                    fn(data);

                    tool.unsubscribe(name, newfn);

                    delete root.selenium_d[name];
                };

                root.selenium_e[name].push(newfn);
            }

            trigger(name, 'subscribe');

            return this;
        },
        clear: name => {
            root.selenium_e[name] = [];
            delete root.selenium_d[name];
        },
        unsubscribe: (name, fn) => {

            if (root.selenium_e[name]) {

                root.selenium_e[name] = root.selenium_e[name].filter(ev => ev !== fn);
            }

            return this;
        },
        trigger: trigger
    };

    return tool;
}));